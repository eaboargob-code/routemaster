rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin of a specific school.
    // It reads the user's profile to get their role and schoolId.
    function isSchoolAdmin(schoolId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return request.auth != null &&
             userProfile.role == 'admin' &&
             userProfile.schoolId == schoolId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read their own profile.
      // Allow admins to read/write profiles within their own school.
      allow read: if request.auth.uid == userId || isSchoolAdmin(resource.data.schoolId);
      allow write: if isSchoolAdmin(resource.data.schoolId);
    }
    
    match /buses/{busId} {
        // Admins can manage all buses in their school.
        allow read, write: if isSchoolAdmin(resource.data.schoolId);
        
        // A driver can only read a bus document if it's assigned to them AND in their school.
        allow read: if request.auth != null 
                    && request.auth.uid == resource.data.driverId
                    && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == resource.data.schoolId;
    }

    match /routes/{routeId} {
        // Admins can manage all routes in their school.
        allow read, write: if isSchoolAdmin(resource.data.schoolId);
    }

    match /trips/{tripId} {
      // Allow drivers to create trips.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.driverId;
      // Allow drivers to read/update their own trips.
      allow read, update: if request.auth != null && request.auth.uid == resource.data.driverId;
    }
  }
}