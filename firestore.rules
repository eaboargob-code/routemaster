
rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    // ----------     HELPERS     ----------
    function authed() {
      return request.auth != null;
    }
    function isAuthedUser(uid) {
      return authed() && request.auth.uid == uid;
    }
    function me() {
      return get(/databases/$(db)/documents/users/$(request.auth.uid));
    }
    function myData() {
      return me().data;
    }
    function myRole() {
      return exists(/databases/$(db)/documents/users/$(request.auth.uid)) ? myData().role : null;
    }
    function mySchoolId() {
      return exists(/databases/$(db)/documents/users/$(request.auth.uid)) ? myData().schoolId : null;
    }
    function isMySchool(schoolId) {
      return mySchoolId() != null && mySchoolId() == schoolId;
    }
    function isAdmin() {
      return myRole() == 'admin';
    }
    function isDriver() {
      return myRole() == 'driver';
    }
    function isSupervisor() {
      return myRole() == 'supervisor';
    }
    function isParent() {
      return myRole() == 'parent';
    }

    // ----------     USERS     ----------
    match /users/{uid} {
      // Admins can manage users in their own school
      allow list: if isAdmin() && isMySchool(mySchoolId());
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow create: if isAdmin() && isMySchool(request.resource.data.schoolId);

      // Any authenticated user can read their own profile
      allow get: if isAuthedUser(uid);

      // Staff can read other user profiles within the same school (e.g. to get names)
      allow get: if (isDriver() || isSupervisor()) && isMySchool(get(/databases/$(db)/documents/users/$(uid)).data.schoolId);
    }


    // ----------     PARENT-STUDENT LINKS     ----------
    match /parentStudents/{parentId} {
      // Admins can manage all links within their school
      allow read, write: if isAdmin() && isMySchool(request.resource.data.schoolId);
      
      // Parents can read their own link document
      allow get: if isAuthedUser(parentId);
      
      // Parents can query for their own link document
      allow list: if isParent() && request.query.limit <= 1 && request.query.offset == null && request.query.filters[0].field == "parentId" && request.query.filters[0].value == request.auth.uid;
    }

    // ----------     ROUTES     ----------
    match /routes/{routeId} {
      // Admins have full control over routes in their school
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow list: if isAdmin();
      
      // Drivers, Supervisors, and Parents can read any route in their school
      allow read: if (isDriver() || isSupervisor() || isParent()) && isMySchool(resource.data.schoolId);
    }
    
    // ----------     BUSES     ----------
    match /buses/{busId} {
      // Admins have full control over buses in their school
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow list: if isAdmin();

      // Staff (Driver/Supervisor) and Parents can read any bus in their school
      allow read: if (isDriver() || isSupervisor() || isParent()) && isMySchool(resource.data.schoolId);
    }

    // ----------     STUDENTS     ----------
    match /students/{studentId} {
        // Admins can manage all students in their school
        allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
        allow list: if isAdmin();

        // Staff can read student data in their school
        allow read: if (isDriver() || isSupervisor()) && isMySchool(resource.data.schoolId);
        
        // Parents can query for their own children
        allow read: if isParent() && isMySchool(resource.data.schoolId) && studentId in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;
    }


    // ----------     TRIPS     ----------
    match /trips/{tripId} {
        // Admins can manage all trips in their school
        allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
        allow list: if isAdmin();

        // Drivers can manage their own trips
        allow create: if isDriver() && isMySchool(request.resource.data.schoolId) && request.resource.data.driverId == request.auth.uid;
        allow read, update: if isDriver() && isMySchool(resource.data.schoolId) && resource.data.driverId == request.auth.uid;

        // Supervisors can read trips they are assigned to
        allow read: if isSupervisor() && isMySchool(resource.data.schoolId) && resource.data.supervisorId == request.auth.uid;
        
        // Parents can read trips relevant to their children (by route)
        allow read: if isParent() && isMySchool(resource.data.schoolId);

        // Subcollection is last
        match /passengers/{passengerId} {
          function trip() {
            return get(/databases/$(db)/documents/trips/$(tripId));
          }
          function tripData() {
            return trip().data;
          }
          
          // The driver of the trip can manage passengers if they are supervising
          allow read: if isDriver() && isAuthedUser(tripData().driverId);
          allow write: if isDriver() && isAuthedUser(tripData().driverId) && tripData().allowDriverAsSupervisor == true;
          
          // The assigned supervisor can manage passengers
          allow read, write: if isSupervisor() && isAuthedUser(tripData().supervisorId);

          // Admins can manage all passengers in their school
          allow read, write: if isAdmin() && isMySchool(tripData().schoolId);

          // Parents can read their own child's passenger status
          allow read: if isParent() && isMySchool(tripData().schoolId) && passengerId in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;
      }
    }
  }
}
