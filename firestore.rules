
rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    // --- Helpers ---
    function authed() {
      return request.auth != null;
    }
    function hasProfile() {
      return exists(/databases/$(db)/documents/users/$(request.auth.uid));
    }
    function profile() {
      return get(/databases/$(db)/documents/users/$(request.auth.uid)).data;
    }
    function role() {
      return hasProfile() ? profile().role : null;
    }
    function schoolId() {
      return hasProfile() ? profile().schoolId : null;
    }
    function isAdmin() {
      return role() == "admin";
    }
    function isDriver() {
      return role() == "driver";
    }
    function isSupervisor() {
      return role() == "supervisor";
    }
    function isParent() {
      return role() == "parent";
    }

    // --- Rules ---
    // User profiles can be read by any authenticated user in the same school,
    // and can only be managed by admins.
    match /users/{uid} {
      allow read: if (isAdmin() || isDriver() || isSupervisor() || isParent())
                    && resource.data.schoolId == schoolId();
      allow list: if isAdmin() && schoolId() != null;
      allow write: if isAdmin() &&
                     ((resource != null && resource.data.schoolId == schoolId()) ||
                      (request.resource.data.schoolId == schoolId()));
      // Allow users to get their own doc to bootstrap their profile
      allow get: if authed() && request.auth.uid == uid;
    }

    // Stores the mapping of a parent to their students.
    match /parentStudents/{parentId} {
      // Parents can query for their own link document
      allow list: if isParent() && request.auth.uid == parentId;
      // Parents can read their own link document
      allow get: if isParent() && request.auth.uid == parentId;

      // Admins can manage all links within their school
      allow read, write: if isAdmin() &&
                           ((resource != null && resource.data.schoolId == schoolId()) ||
                            (request.resource.data.schoolId == schoolId()));
    }

    // Routes can be managed by admins, but read by drivers/supervisors/parents
    // in the same school.
    match /routes/{id} {
      allow read: if (isAdmin() || isDriver() || isSupervisor() || isParent())
                    && resource.data.schoolId == schoolId();
      allow list: if isAdmin() && schoolId() != null;
      allow write: if isAdmin() &&
                     ((resource != null && resource.data.schoolId == schoolId()) ||
                      (request.resource.data.schoolId == schoolId()));
    }

    // Buses can be managed by admins. Drivers can read their assigned bus.
    // Supervisors and Parents can read all buses in their school.
    match /buses/{id} {
      allow read: if (isSupervisor() || isParent()) && resource.data.schoolId == schoolId();
      allow read: if isDriver() && resource.data.driverId == request.auth.uid;

      allow list: if isAdmin() && schoolId() != null;
      allow read, write: if isAdmin() &&
                           ((resource != null && resource.data.schoolId == schoolId()) ||
                            (request.resource.data.schoolId == schoolId()));
    }

    // Trips can be created/managed by drivers and admins.
    // Supervisors and Parents can read trips they are associated with.
    match /trips/{id} {
      // Parents can list/read trips relevant to their children (by route)
      allow read, list: if isParent() && resource.data.schoolId == schoolId();

      // Driver rules
      allow create: if isDriver() && request.resource.data.driverId == request.auth.uid && request.resource.data.schoolId == schoolId();
      allow read, update: if isDriver() && resource.data.driverId == request.auth.uid && resource.data.schoolId == schoolId();

      // Supervisor rules
      allow read: if isSupervisor() && resource.data.schoolId == schoolId() && resource.data.supervisorId == request.auth.uid;
      allow update: if isSupervisor() && resource.data.schoolId == schoolId() && resource.data.supervisorId == request.auth.uid
                      && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts', 'updatedAt']);
      
      // Admin rules
      allow list: if isAdmin() && schoolId() != null;
      allow read, update, delete: if isAdmin() && resource.data.schoolId == schoolId();
      allow create: if isAdmin() && request.resource.data.schoolId == schoolId();
    }

    // Passengers are a subcollection of trips.
    match /trips/{tripId}/passengers/{studentId} {
      function trip() { return get(/databases/$(db)/documents/trips/$(tripId)); }

      // Parents can read their own child's status within a trip.
      allow get: if isParent() && request.auth.uid in get(/databases/$(db)/documents/parentStudents/{studentId}).data.parentIds;
      
      // Admin
      allow read, write: if isAdmin() && trip().data.schoolId == schoolId();
      
      // Supervisor
      allow read, write: if isSupervisor() && trip().data.supervisorId == request.auth.uid;
      
      // Driver
      allow read: if isDriver() && trip().data.driverId == request.auth.uid;
      allow create: if isDriver() && trip().data.driverId == request.auth.uid && request.resource.data.status == 'pending';
      allow update, delete: if isDriver() && trip().data.driverId == request.auth.uid && trip().data.allowDriverAsSupervisor == true;
    }

    // Students can be managed by admins, and read by staff.
    // Parents can only read their own linked children.
    match /students/{id} {
      allow read: if (isAdmin() || isDriver() || isSupervisor())
                    && resource.data.schoolId == schoolId();
      
      // A parent can read a student doc IF that student's ID is in the parent's link document.
      allow get: if isParent()
                   && resource.data.schoolId == schoolId()
                   && id in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;

      allow list: if isAdmin() && schoolId() != null;
      allow write: if isAdmin() &&
                     ((resource != null && resource.data.schoolId == schoolId()) ||
                      (request.resource.data.schoolId == schoolId()));
    }
  }
}
