rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    
    // Is the user authenticated?
    function isAuth() {
      return request.auth != null;
    }
    
    // Does the incoming data's schoolId match the user's profile schoolId?
    function isSameSchool(userId, schoolId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.schoolId == schoolId;
    }
    
    // Is the user an admin for the given school?
    function isSchoolAdmin(userId, schoolId) {
      let user = get(/databases/$(database)/documents/users/$(userId)).data;
      return user.role == 'admin' && user.schoolId == schoolId;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // An admin can manage any user in their own school.
      // A user can read/update their own profile.
      allow read, update, create: if isAuth() && 
                                    (isSchoolAdmin(request.auth.uid, resource.data.schoolId) ||
                                     request.auth.uid == userId);
    }

    match /routes/{routeId} {
        // An admin can manage any route in their school.
        allow read, write: if isAuth() && isSchoolAdmin(request.auth.uid, resource.data.schoolId);
    }

    match /buses/{busId} {
      // Admins can manage buses in their school.
      // Drivers can read their assigned bus.
      allow read: if isAuth() && 
                     (isSchoolAdmin(request.auth.uid, resource.data.schoolId) || 
                      resource.data.driverId == request.auth.uid);
      
      allow write: if isAuth() && isSchoolAdmin(request.auth.uid, resource.data.schoolId);
    }
    
    match /trips/{tripId} {
      // Drivers can create trips for their own school
      allow create: if isAuth() && isSameSchool(request.auth.uid, request.resource.data.schoolId);
      
      // Drivers can only read/update their own trips
      allow read, update: if isAuth() && request.auth.uid == resource.data.driverId;
    }
  }
}
