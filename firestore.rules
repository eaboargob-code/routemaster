rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // ---------- helpers ----------
    function authed()       { return request.auth != null; }
    function hasMe()        { return authed() && exists(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function me()           { return get(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function myRole()       { return hasMe() ? me().data.role : null; }
    function mySchool()     { return hasMe() ? me().data.schoolId : null; }
    function isAdmin()      { return myRole() == "admin"; }
    function isDriver()     { return myRole() == "driver"; }
    function isSupervisor() { return myRole() == "supervisor"; }
    function trip() { return get(/databases/$(db)/documents/trips/$(tripId)); }

    // ---------- users ----------
    match /users/{uid} {
      allow read, list: if isAdmin() && resource.data.schoolId == mySchool();
      allow create, update, delete: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow get: if authed() && request.auth.uid == uid;
      allow get: if (isDriver() || isSupervisor())
        && get(/databases/$(db)/documents/users/$(uid)).data.schoolId == mySchool();
    }

    // ---------- routes ----------
    match /routes/{id} {
      allow list, read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow get: if (isDriver() || isSupervisor())
        && get(/databases/$(db)/documents/routes/$(id)).data.schoolId == mySchool();
    }

    // ---------- buses ----------
    match /buses/{id} {
      allow list, read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow read: if isDriver() && resource.data.driverId == request.auth.uid;
      allow read: if isSupervisor() && resource.data.schoolId == mySchool();
    }
    
    // ---------- students ----------
    match /students/{id} {
       allow list, read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow read: if (isDriver() || isSupervisor()) && resource.data.schoolId == mySchool();
    }
    
    // ---------- trips ----------
    match /trips/{id} {
      allow list, read, create, update, delete: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow create: if isDriver()
        && request.resource.data.driverId == request.auth.uid
        && request.resource.data.schoolId == mySchool();
      allow read, update: if isDriver()
        && resource.data.driverId == request.auth.uid
        && resource.data.schoolId == mySchool();
      allow read: if isSupervisor()
        && resource.data.schoolId == mySchool()
        && resource.data.supervisorId == request.auth.uid;
       
      allow update: if isSupervisor()
        && resource.data.schoolId == mySchool()
        && resource.data.supervisorId == request.auth.uid
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);

      // ---------- passengers subcollection ----------
      match /passengers/{studentId} {
        // READ visibility (roster)
        allow read: if isAdmin() && trip().data.schoolId == mySchool();
        allow read: if isSupervisor() && trip().data.schoolId == mySchool()
                                      && trip().data.supervisorId == request.auth.uid;
        // Driver can always view their roster
        allow read: if isDriver()     && trip().data.schoolId == mySchool()
                                      && trip().data.driverId == request.auth.uid;

        // WRITE permissions (check-ins/outs)
        // Admin full control
        allow write: if isAdmin() && trip().data.schoolId == mySchool();

        // Supervisor controls their own tripâ€™s roster
        allow write: if isSupervisor()
          && trip().data.schoolId == mySchool()
          && trip().data.supervisorId == request.auth.uid;

        // Driver can seed pending rows at trip start
        allow create: if isDriver()
          && trip().data.schoolId == mySchool()
          && trip().data.driverId == request.auth.uid
          && request.resource.data.status == "pending"
          && (!("boardedAt" in request.resource.data) || request.resource.data.boardedAt == null)
          && (!("droppedAt" in request.resource.data) || request.resource.data.droppedAt == null);

        // Driver may update/delete only when explicitly allowed to act as supervisor
        allow update, delete: if isDriver()
          && trip().data.schoolId == mySchool()
          && trip().data.driverId == request.auth.uid
          && trip().data.allowDriverAsSupervisor == true;
      }
    }
  }
}
