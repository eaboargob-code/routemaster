rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // -------- helpers --------
    function authed()       { return request.auth != null; }
    function hasMe()        { return authed() && exists(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function me()           { return get(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function myRole()       { return hasMe() ? me().data.role : null; }
    function mySchool()     { return hasMe() ? me().data.schoolId : null; }
    function isAdmin()      { return myRole() == "admin"; }
    function isDriver()     { return myRole() == "driver"; }
    function isSupervisor() { return myRole() == "supervisor"; }
    function isParent()     { return myRole() == "parent"; }

    // ---- convenience for parent link ----
    function parentLink() {
      return get(/databases/$(db)/documents/parentStudents/$(request.auth.uid));
    }
    function hasParentLink() {
      return exists(/databases/$(db)/documents/parentStudents/$(request.auth.uid));
    }
    function isMyChild(studentId) {
      return hasParentLink() && (studentId in parentLink().data.studentIds);
    }

    // -------- users --------
    match /users/{uid} {
      // Admin directory access (scoped to school)
      allow list:   if isAdmin() && mySchool() != null;
      allow read:   if isAdmin() && resource.data.schoolId == mySchool();
      allow update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      // Everyone can GET their own profile
      allow get: if authed() && request.auth.uid == uid;

      // Staff/parents may GET specific user docs in their school (to show names)
      allow get: if (isDriver() || isSupervisor() || isParent())
        && get(/databases/$(db)/documents/users/$(uid)).data.schoolId == mySchool();
    }

    // -------- parentStudents (parent ↔ children links) --------
    match /parentStudents/{parentId} {
      // Parent can read their own link doc (not list all)
      allow get: if isParent() && request.auth.uid == parentId;

      // Admin can manage link docs within school
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // No listing for non-admins
      allow list: if isAdmin() && mySchool() != null;
    }

    // -------- routes --------
    match /routes/{id} {
      // Admin full control within school
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Staff/parent read in their school
      allow read: if (isDriver() || isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();
    }

    // -------- buses --------
    match /buses/{id} {
      // Admin full control within school
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Driver: only their assigned bus
      allow read: if isDriver() && resource.data.driverId == request.auth.uid;

      // Supervisor/Parent: read buses in their school
      allow read: if (isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();
    }

    // -------- trips --------
    match /trips/{id} {
      // Admin
      allow list, get, update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      // Driver
      allow create: if isDriver()
        && request.resource.data.driverId == request.auth.uid
        && request.resource.data.schoolId == mySchool();
      allow read, update: if isDriver()
        && resource.data.driverId == request.auth.uid
        && resource.data.schoolId == mySchool();

      // Supervisor/Parent can READ trips in their school
      allow read: if (isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();

      // Supervisor: limited counters update on their own trip
      allow update: if isSupervisor()
        && resource.data.schoolId == mySchool()
        && resource.data.supervisorId == request.auth.uid
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);
    }

    // -------- trips/{tripId}/passengers/{studentId} --------
    match /trips/{tripId}/passengers/{studentId} {
      function trip() { return get(/databases/$(db)/documents/trips/$(tripId)); }

      // Admin manage within school
      allow read, write: if isAdmin()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool());

      // Supervisor manage for assigned trips
      allow read, write: if isSupervisor()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.supervisorId == request.auth.uid;

      // Driver read; write only if acting as supervisor (flag)
      allow read: if isDriver()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.driverId == request.auth.uid;

      // Seeding pending rows at trip start
      allow create: if isDriver()
        && (request.resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.driverId == request.auth.uid
        && request.resource.data.status == "pending"
        && (!("boardedAt" in request.resource.data) || request.resource.data.boardedAt == null)
        && (!("droppedAt" in request.resource.data) || request.resource.data.droppedAt == null);

      // Driver updates only when allowed as supervisor
      allow update, delete: if isDriver()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.driverId == request.auth.uid
        && trip().data.allowDriverAsSupervisor == true;

      // Parent: read only their child's passenger rows in their school
      allow read: if isParent()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && isMyChild(studentId);
    }

    // -------- students --------
    match /students/{id} {
      // Admin manage within school
      allow list: if isAdmin() && mySchool() != null;
      allow write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Staff read in school
      allow read: if (isAdmin() || isDriver() || isSupervisor())
        && resource.data.schoolId == mySchool();

      // Parent: can read only their child’s student doc (in same school)
      allow read: if isParent()
        && resource.data.schoolId == mySchool()
        && isMyChild(id);
    }
  }
}
    