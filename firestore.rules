
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    
    // Check if the user is authenticated
    function isAuth() {
      return request.auth != null;
    }
    
    // Check if the user making the request has the 'admin' role for a given school
    function isSchoolAdmin(schoolId) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
             && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId == schoolId;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      // Admins can manage any user in their own school.
      // A user can read their own profile.
      allow read: if isSchoolAdmin(resource.data.schoolId) || (isAuth() && request.auth.uid == userId);
      
      // Admins can write to any user profile in their school.
      allow write: if isSchoolAdmin(resource.data.schoolId);
    }
    
    match /routes/{routeId} {
        // Admins can perform any action on routes within their school.
        allow read, write: if isSchoolAdmin(resource.data.schoolId);
    }

    match /buses/{busId} {
      // An admin can read any bus in their school.
      // A driver can read a bus if it's assigned to them.
      allow read: if isSchoolAdmin(resource.data.schoolId) || (isAuth() && resource.data.driverId == request.auth.uid);
      
      // Only admins can create, update, or delete buses.
      allow write: if isSchoolAdmin(resource.data.schoolId);
    }
    
    match /trips/{tripId} {
        // A user can create a trip for themselves.
        allow create: if isAuth() && request.resource.data.driverId == request.auth.uid;
        
        // A user can read/update their own trips.
        // An admin can read/update any trip in their school.
        allow read, update: if (isAuth() && resource.data.driverId == request.auth.uid) || isSchoolAdmin(resource.data.schoolId);
    }
  }
}
