
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isSchoolAdmin(schoolId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isAuth() && user.role == "admin" && user.schoolId == schoolId;
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Admins can manage users in their school
      allow read, write: if isSchoolAdmin(resource.data.schoolId);
      // Users can read their own profile
      allow get: if isAuth() && request.auth.uid == userId;
    }

    // --- Routes ---
    match /routes/{routeId} {
      // Admins can manage all routes in their school
      allow read, write: if isSchoolAdmin(resource.data.schoolId);
    }

    // --- Buses ---
    match /buses/{busId} {
      // Admins can manage all buses in their school
      allow read, write: if isSchoolAdmin(resource.data.schoolId);
      
      // Drivers can query for their own bus within their school.
      // This rule must check every field used in the client-side query's where() clauses.
      allow list: if isAuth() && request.query.driverId == request.auth.uid && request.query.schoolId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.schoolId;
      
      // Drivers can read their own bus document directly.
      allow get: if isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'driver' && resource.data.driverId == request.auth.uid;
    }

    // --- Trips ---
    match /trips/{tripId} {
      // Admins can view all trips in their school
      allow read: if isSchoolAdmin(resource.data.schoolId);
      // Drivers can create and manage their own trips
      allow read, write: if isAuth() && resource.data.driverId == request.auth.uid;
    }
  }
}
