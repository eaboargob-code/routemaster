
rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    // ---------- helpers ----------
    function isAuthed() {
      return request.auth != null;
    }

    function isExistingUser() {
      return isAuthed() && exists(/databases/$(db)/documents/users/$(request.auth.uid));
    }

    function getUserData() {
      return get(/databases/$(db)/documents/users/$(request.auth.uid)).data;
    }

    function getUserRole() {
      return isExistingUser() ? getUserData().role : null;
    }

    function getUserSchoolId() {
      return isExistingUser() ? getUserData().schoolId : null;
    }

    function isAdmin() {
      return getUserRole() == "admin";
    }

    function isDriver() {
      return getUserRole() == "driver";
    }

    function isSupervisor() {
      return getUserRole() == "supervisor";
    }

    function isParent() {
      return getUserRole() == "parent";
    }
    
    function isRequestingOwnData(uid) {
      return isAuthed() && request.auth.uid == uid;
    }

    function isWithinSchool(doc) {
      return doc.schoolId == getUserSchoolId();
    }

    // ---------- users ----------
    match /users/{uid} {
      // Admins can manage users within their own school.
      allow list: if isAdmin() && getUserSchoolId() != null;
      allow read, update, delete: if isAdmin() && isWithinSchool(resource.data);
      allow create: if isAdmin() && isWithinSchool(request.resource.data);

      // Any authenticated user can read their own profile document.
      allow get: if isRequestingOwnData(uid);
      
      // Staff can read other user profiles within the same school (e.g., to see names).
      allow get: if (isDriver() || isSupervisor()) && isWithinSchool(get(/databases/$(db)/documents/users/$(uid)).data);
    }

    // ---------- parentStudents ----------
    match /parentStudents/{linkId} {
        // Parent can read their own link document.
        allow list, read: if isParent() && request.query.parentId == request.auth.uid;
        allow get: if isParent() && isRequestingOwnData(resource.data.parentId);
        
        // Admin can manage any link document within their school.
        allow read, write: if isAdmin() && (isWithinSchool(resource.data) || isWithinSchool(request.resource.data));
    }

    // ---------- routes ----------
    match /routes/{routeId} {
      // Admins have full control over routes in their school.
      allow read, write: if isAdmin() && (isWithinSchool(resource.data) || isWithinSchool(request.resource.data));

      // Drivers, Supervisors, and Parents can read route data in their school.
      allow read: if (isDriver() || isSupervisor() || isParent()) && isWithinSchool(resource.data);
    }

    // ---------- buses ----------
    match /buses/{busId} {
      // Admins have full control over buses in their school.
      allow read, write: if isAdmin() && (isWithinSchool(resource.data) || isWithinSchool(request.resource.data));
      
      // A driver can read their own assigned bus.
      allow read: if isDriver() && resource.data.driverId == request.auth.uid;
      
      // Supervisors and Parents can read bus data in their school.
      allow read: if (isSupervisor() || isParent()) && isWithinSchool(resource.data);
    }

    // ---------- trips ----------
    match /trips/{tripId} {
      // Admins can manage trips in their school.
      allow read, write: if isAdmin() && isWithinSchool(resource.data);
      
      // Drivers can create and manage their own trips.
      allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
      allow read, update: if isDriver() && resource.data.driverId == request.auth.uid;
      
      // Supervisors can read trips they are assigned to.
      allow read: if isSupervisor() && resource.data.supervisorId == request.auth.uid;
      
      // Parents can read trip data in their school (to see status and location).
      allow read: if isParent() && isWithinSchool(resource.data);
    }

    // ---------- passengers subcollection ----------
    match /trips/{tripId}/passengers/{studentId} {
      function getTrip() { return get(/databases/$(db)/documents/trips/$(tripId)); }
      
      // Staff (admin, driver, supervisor) can read passenger data for trips in their school.
      allow read: if (isAdmin() || isDriver() || isSupervisor()) && isWithinSchool(getTrip().data);
      
      // Admin/Supervisor can write to passenger data. Driver can if enabled.
      allow write: if isAdmin() && isWithinSchool(getTrip().data);
      allow write: if isSupervisor() && isWithinSchool(getTrip().data) && getTrip().data.supervisorId == request.auth.uid;
      allow write: if isDriver() && isWithinSchool(getTrip().data) && getTrip().data.driverId == request.auth.uid && getTrip().data.allowDriverAsSupervisor == true;
      
      // Driver can create initial passenger records when starting a trip.
      allow create: if isDriver() && isWithinSchool(getTrip().data) && getTrip().data.driverId == request.auth.uid;

      // Parents can read their own child's passenger document for a specific trip.
      allow get: if isParent() && request.auth.uid == get(/databases/$(db)/documents/parentStudents/{linkId}).data.parentId
                    && studentId in get(/databases/$(db)/documents/parentStudents/{linkId}).data.studentIds;
      allow read: if isParent() && exists(/databases/$(db)/documents/parentStudents/$(request.auth.uid))
                    && studentId in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;
    }

    // ---------- students ----------
    match /students/{studentId} {
      // Staff can read student data within their school.
      allow read: if (isAdmin() || isDriver() || isSupervisor()) && isWithinSchool(resource.data);
      
      // Admins can manage students in their school.
      allow write: if isAdmin() && (isWithinSchool(resource.data) || isWithinSchool(request.resource.data));
      
      // Parents can read the documents of their own children.
      allow read: if isParent() && isWithinSchool(resource.data)
                    && exists(/databases/$(db)/documents/parentStudents/$(request.auth.uid))
                    && studentId in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;
    }
  }
}
