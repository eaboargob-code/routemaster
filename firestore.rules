rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    /* =================== Helpers =================== */
    function authed()            { return request.auth != null; }
    function hasMe(sid)          { return authed() && exists(/databases/$(db)/documents/schools/$(sid)/users/$(request.auth.uid)); }
    function me(sid)             { return get(/databases/$(db)/documents/schools/$(sid)/users/$(request.auth.uid)); }
    function myRole(sid)         { return hasMe(sid) ? me(sid).data.role : null; }

    function isAdmin(sid)        { return myRole(sid) == "admin"; }
    function isDriver(sid)       { return myRole(sid) == "driver"; }
    function isSupervisor(sid)   { return myRole(sid) == "supervisor"; }
    function isParent(sid)       { return myRole(sid) == "parent"; }

    // Parent link is stored per school
    function parentLink(sid)     { return get(/databases/$(db)/documents/schools/$(sid)/parentStudents/$(request.auth.uid)); }
    function hasParentLink(sid)  { return exists(/databases/$(db)/documents/schools/$(sid)/parentStudents/$(request.auth.uid)); }
    function isMyChild(sid, studentId) {
      return hasParentLink(sid) && parentLink(sid).data.studentIds.hasAny([studentId]);
    }

    /* ============ Top-level support collections ============ */

    // uid -> schoolId lookup used at login/bootstrap
    match /usersIndex/{uid} {
      allow get, create: if authed() && request.auth.uid == uid;
      allow list, update, delete: if false;
    }

    // Global directory of users (display-only). Each doc MUST contain schoolId.
    match /users/{uid} {
      allow get: if authed() && (request.auth.uid == uid || hasMe(resource.data.schoolId));
      allow list, create, update, delete: if false;
    }

    /* =================== School namespace =================== */
    match /schools/{schoolId} {
      allow create: if authed();
      allow get:    if authed();

      /* -------- users -------- */
      match /users/{uid} {
        // Admin directory management
        allow list, read, update, delete, create: if isAdmin(schoolId);

        // Self-create (bootstrap)
        allow create: if authed() && request.auth.uid == uid;

        // Any school member can GET user docs (directory)
        allow get: if authed()
          && ( request.auth.uid == uid
               || (isAdmin(schoolId) || isDriver(schoolId) || isSupervisor(schoolId) || isParent(schoolId)) );

        // Self may update ONLY fcmTokens, phoneNumber, or photoUrl
        allow update: if authed()
          && request.auth.uid == uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['fcmTokens','phoneNumber','photoUrl']);

        // Temporary legacy self-updates (keep until app no longer needs it)
        allow update: if authed()
          && request.auth.uid == uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['role','assignedBusId','assignedRouteId']);

        /* ---- inbox ----
           Owners manage their own inbox.
           Cloud Functions (if using callable with custom claims) may also create. */
        match /inbox/{noteId} {
          allow list, get, create, update, delete: if authed() && request.auth.uid == uid;
          allow create: if request.auth != null && request.auth.token.admin == true; // optional; Admin SDK bypasses rules anyway
        }
      }

      /* -------- students --------
         Admin manages student records (including grade, photoUrl, defaultStopId).
         Staff (driver/supervisor) can read/list for roster.
         Parent can read only their own child. */
      match /students/{id} {
        allow read, write, list: if isAdmin(schoolId);

        // Staff read/list for roster use
        allow read: if isDriver(schoolId) || isSupervisor(schoolId);
        allow list: if isDriver(schoolId) || isSupervisor(schoolId);

        // TEMPORARY: Allow drivers to create test students (for debugging)
        allow write: if isDriver(schoolId) && id.matches('student[0-9]+');

        // Parent read only their child
        allow read: if isParent(schoolId) && isMyChild(schoolId, id);
      }

      /* -------- parentStudents -------- */
      match /parentStudents/{parentId} {
        allow get:   if isParent(schoolId) && request.auth.uid == parentId;
        allow list:  if isAdmin(schoolId) || isDriver(schoolId) || isSupervisor(schoolId);
        allow read, write: if isAdmin(schoolId);
      }

      /* -------- absences --------
         Parents create their own child’s absence; can read their own records only.
         Staff can read/list for roster prep. Admin full. */
      match /absences/{absenceId} {
        // Admin
        allow read, write, list: if isAdmin(schoolId);

        // Parent creates for linked child
        allow create: if isParent(schoolId) 
          && request.resource.data.parentId == request.auth.uid
          && isMyChild(schoolId, request.resource.data.studentId);

        // Parent can read their own absence document
        allow read: if isParent(schoolId) && resource.data.parentId == request.auth.uid;

        // Prevent parents from listing all absences
        allow list: if false;

        // Staff (driver/supervisor) read/list for today’s roster planning
        allow read, list: if isDriver(schoolId) || isSupervisor(schoolId);
      }

      /* -------- routes -------- */
      match /routes/{id} {
        // Admin manage
        allow read, write, list: if isAdmin(schoolId);

        // Staff & parent read route meta
        allow read: if isDriver(schoolId) || isSupervisor(schoolId) || isParent(schoolId);
        allow list: if isDriver(schoolId) || isSupervisor(schoolId);

        /* ---- stops subcollection ----
           Parents may read a child’s stop info for map display.
           Staff lists stops to render driver map & planning UI.
           Admin writes. */
        match /stops/{stopId} {
          allow read: if isAdmin(schoolId) || isDriver(schoolId) || isSupervisor(schoolId) || isParent(schoolId);
          allow list: if isAdmin(schoolId) || isDriver(schoolId) || isSupervisor(schoolId);
          allow write: if isAdmin(schoolId);
        }
      }

      /* -------- trips -------- */
      match /trips/{id} {
        // Collection queries allowed for roles (per-doc checks still apply elsewhere)
        allow list: if isAdmin(schoolId) || isSupervisor(schoolId) || isDriver(schoolId) || isParent(schoolId);

        // Admin full
        allow read, update, delete, create: if isAdmin(schoolId);

        // Driver create/read own trip
        allow create: if isDriver(schoolId) && request.resource.data.driverId == request.auth.uid;
        allow read:    if isDriver(schoolId) && resource.data.driverId == request.auth.uid;

        // Driver may update only allowed fields on own active trip
        allow update: if isDriver(schoolId)
          && resource.data.driverId == request.auth.uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly([
            'endedAt','status','lastLocation',
            'allowDriverAsSupervisor','driverSupervisionLocked',
            'passengerStatuses','updatedAt'
          ]);

        // TEMPORARY: Allow drivers to fully update test trips (for debugging)
        allow update: if isDriver(schoolId) && id.matches('test-trip-.*');

        // Driver-as-supervisor may update counts (when allowed)
        allow update: if isDriver(schoolId)
          && resource.data.driverId == request.auth.uid
          && resource.data.allowDriverAsSupervisor == true
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);

        // Supervisor & Parent read
        allow read: if isSupervisor(schoolId) || isParent(schoolId);

        // Supervisor may update counts on assigned trip
        allow update: if isSupervisor(schoolId)
          && resource.data.supervisorId == request.auth.uid
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);

        /* --- telemetry (optional breadcrumb replay) --- */
        match /telemetry/{pointId} {
          function trip() {
            return get(/databases/$(db)/documents/schools/$(schoolId)/trips/$(id));
          }
          // Admin & supervisors can read breadcrumb
          allow read, list: if isAdmin(schoolId) || isSupervisor(schoolId);
          // Driver writes telemetry for their active trip
          allow create: if isDriver(schoolId) && trip().data.driverId == request.auth.uid;
        }
      }

      /* -------- trips/{tripId}/passengers -------- */
      match /trips/{tripId}/passengers/{docId} {
        function trip() {
          return get(/databases/$(db)/documents/schools/$(schoolId)/trips/$(tripId));
        }

        // Admin
        allow read, write, list: if isAdmin(schoolId);

        // Supervisor manage on assigned trip
        allow read, write, list: if isSupervisor(schoolId)
          && trip().data.supervisorId == request.auth.uid;

        // Driver read/list own trip
        allow read, list: if isDriver(schoolId) && trip().data.driverId == request.auth.uid;

        // Driver create passenger (pending only) when seeding roster
        allow create: if isDriver(schoolId)
          && trip().data.driverId == request.auth.uid
          && request.resource.data.status == "pending";

        // Driver may update/delete when supervisor mode enabled
        allow update, delete: if isDriver(schoolId)
          && trip().data.driverId == request.auth.uid
          && trip().data.allowDriverAsSupervisor == true;

        // Parent can read only their child's passenger doc
        allow get, read: if isParent(schoolId)
          && resource.data.studentId != null
          && isMyChild(schoolId, resource.data.studentId);

        // Prevent parents from listing all passengers
        allow list: if false;
      }

      /* -------- buses -------- */
      match /buses/{busId} {
        allow read, write, list: if isAdmin(schoolId);
        allow read, list: if isDriver(schoolId) || isSupervisor(schoolId);
      }

      /* -------- config/transport --------
         Admin-only configuration: allowDriverAsSupervisor, thresholds, etc. */
      match /config/transport {
        allow read, write: if isAdmin(schoolId);
      }

      /* -------- config/location --------
         School location data accessible to drivers for route optimization */
      match /config/location {
        allow read: if isAdmin(schoolId) || isDriver(schoolId) || isSupervisor(schoolId);
        allow write: if isAdmin(schoolId);
      }

      /* -------- config/profile --------
         School profile information: admin can read/write, drivers can read for location data */
      match /config/profile {
        allow read, write: if isAdmin(schoolId);
        allow read: if isDriver(schoolId);
      }
    }
  }
}