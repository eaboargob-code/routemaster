rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Deny all reads/writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // Profile: public readable, only owner can write
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
      
      // Inbox: only owner can read/write
      match /inbox/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // PUBLIC LOOKUPS
    match /schools/{schoolId} {
      allow read: if request.auth != null;
    }

    // SCHOOL-SCOPED DATA
    // Most collections are scoped by schoolId.
    // The rules below grant read access if the user's custom token has a matching schoolId.
    // Write access is typically restricted to 'admin' role.

    function isSchoolMember(schoolId) {
      return request.auth.token.schoolId == schoolId;
    }
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    function isRoleInSchool(role, schoolId) {
      return isSchoolMember(schoolId) && isRole(role);
    }
    function isAdmin(schoolId) {
      return isRoleInSchool('admin', schoolId);
    }
    function isDriver(schoolId) {
      return isRoleInSchool('driver', schoolId);
    }
    function isSupervisor(schoolId) {
      return isRoleInSchool('supervisor', schoolId);
    }
    function isParent(schoolId) {
      return isRoleInSchool('parent', schoolId);
    }

    match /routes/{routeId} {
      allow read: if isSchoolMember(resource.data.schoolId);
      allow write: if isAdmin(request.resource.data.schoolId);
    }

    match /buses/{busId} {
      allow read: if isSchoolMember(resource.data.schoolId);
      allow write: if isAdmin(request.resource.data.schoolId);
    }

    match /students/{studentId} {
      allow read: if isSchoolMember(resource.data.schoolId);
      allow write: if isAdmin(request.resource.data.schoolId);
    }
    
    // Parent-Student Links
    // Admins can manage all links.
    // Parents can only read their own link document.
    match /parentStudents/{parentId} {
       allow read: if request.auth.uid == parentId || isAdmin(resource.data.schoolId);
       allow write: if isAdmin(request.resource.data.schoolId);
    }
    
    // TRIPS
    match /trips/{tripId} {
      // Allow read if user is part of that school
      allow read: if isSchoolMember(resource.data.schoolId);
      
      // Allow create if user is an admin or a driver for that school
      allow create: if isAdmin(request.resource.data.schoolId) || isDriver(request.resource.data.schoolId);
      
      // Allow update if admin, or the assigned driver/supervisor
      allow update: if isAdmin(resource.data.schoolId) ||
                       (isDriver(resource.data.schoolId) && request.auth.uid == resource.data.driverId) ||
                       (isSupervisor(resource.data.schoolId) && request.auth.uid == resource.data.supervisorId);

      // PASSENGERS SUBCOLLECTION
      match /passengers/{passengerId} {
        // Read allowed for any school member (for trip details view)
        allow read: if isSchoolMember(resource.data.schoolId);
        
        // Writes are more restricted
        allow write: if 
          // Admin can always write
          isAdmin(request.resource.data.schoolId) ||
          // Driver of THIS trip can write
          (get(/databases/$(database)/documents/trips/$(tripId)).data.driverId == request.auth.uid) ||
          // Supervisor of THIS trip can write
          (get(/databases/$(database)/documents/trips/$(tripId)).data.supervisorId == request.auth.uid);
      }
    }

  }
}
