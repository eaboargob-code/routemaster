rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's profile
    function getUserProfile() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Helper function to check if the user has a specific role for a given school
    function hasRole(schoolId, role) {
      let profile = getUserProfile();
      return request.auth.uid != null &&
             profile.schoolId == schoolId &&
             profile.role == role;
    }

    // Admins can manage any user within their own school
    match /users/{userId} {
      allow read, write: if hasRole(resource.data.schoolId, 'admin');
    }
    
    // Logged-in users can read their own profile
    match /users/{userId} {
      allow get: if request.auth.uid == userId;
    }

    // Admins can manage all routes for their school
    match /routes/{routeId} {
      allow read, write: if hasRole(request.resource.data.schoolId, 'admin');
    }
    
    // Admins can manage all buses for their school
    match /buses/{busId} {
        allow read, write: if hasRole(request.resource.data.schoolId, 'admin');
    }

    // Drivers can only read the bus they are assigned to
    match /buses/{busId} {
        allow get: if request.auth.uid != null &&
                      resource.data.driverId == request.auth.uid &&
                      hasRole(resource.data.schoolId, 'driver');
    }
    
    // Drivers can manage their own trips
    match /trips/{tripId} {
        allow read, write: if hasRole(request.resource.data.schoolId, 'driver') &&
                              request.resource.data.driverId == request.auth.uid;
    }
  }
}
