rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    // --- Helper Functions ---
    // These functions provide shortcuts for common checks in the rules below.

    // Is there a user signed in?
    function isAuth() {
      return request.auth != null;
    }

    // Get the profile document for the currently signed-in user.
    function getUserProfile() {
      return get(/databases/$(db)/documents/users/$(request.auth.uid));
    }

    // Does the current user have a profile document?
    function userHasProfile() {
      return isAuth() && getUserProfile() != null;
    }

    // What is the current user's role? (e.g., "admin", "driver")
    function getUserRole() {
      return userHasProfile() ? getUserProfile().data.role : null;
    }
    
    // What is the current user's schoolId?
    function getUserSchoolId() {
      return userHasProfile() ? getUserProfile().data.schoolId : null;
    }

    // Is the current user an admin?
    function isAdmin() {
      return getUserRole() == "admin";
    }

    // Is the current user a driver?
    function isDriver() {
      return getUserRole() == "driver";
    }
    
    // Can an admin access this resource?
    // This function checks if the user is an admin AND the resource
    // they are trying to access belongs to their own school.
    function isSchoolAdmin(schoolId) {
      return isAdmin() && schoolId == getUserSchoolId();
    }


    // --- Collection Rules ---

    match /users/{userId} {
      // Admins can manage any user within their own school.
      // A user can always read their own profile.
      allow read, write: if isSchoolAdmin(resource.data.schoolId) ||
                             isSchoolAdmin(request.resource.data.schoolId);
      allow get: if isAuth() && request.auth.uid == userId;
    }

    match /routes/{routeId} {
      // Admins have full control over routes in their school.
      allow read, write: if isSchoolAdmin(resource.data.schoolId) ||
                             isSchoolAdmin(request.resource.data.schoolId);
      // Drivers can read any route that belongs to their school.
      allow get: if isDriver() && resource.data.schoolId == getUserSchoolId();
    }

    match /buses/{busId} {
      // Admins have full control over buses in their school.
      allow read, write: if isSchoolAdmin(resource.data.schoolId) ||
                             isSchoolAdmin(request.resource.data.schoolId);
      // A driver can list/query for the bus they are assigned to.
      allow list: if isDriver() && request.query.driverId == request.auth.uid;
    }

    match /trips/{tripId} {
        // Admins have full control over trips in their school.
        allow read, write: if isSchoolAdmin(resource.data.schoolId) ||
                               isSchoolAdmin(request.resource.data.schoolId);
        
        // Drivers can create, read, and update their own trips.
        function isOwnTrip() {
            return resource.data.driverId == request.auth.uid &&
                   resource.data.schoolId == getUserSchoolId();
        }
        function isCreatingOwnTrip() {
            return request.resource.data.driverId == request.auth.uid &&
                   request.resource.data.schoolId == getUserSchoolId();
        }
        
        allow read, update: if isDriver() && isOwnTrip();
        allow create: if isDriver() && isCreatingOwnTrip();
    }
  }
}