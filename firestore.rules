rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function uid() {
      return request.auth.uid;
    }

    function isAdmin(schoolId) {
      return get(/databases/$(database)/documents/schools/$(schoolId)/users/$(uid())).data.role == 'admin';
    }

    // Top-level users collection (for login/profile resolution)
    match /users/{userId} {
      allow read, write: if isAuth() && uid() == userId;
    }
    
    // Index for resolving a user's school
    match /usersIndex/{userId} {
      allow read: if isAuth();
    }

    // School-specific data
    match /schools/{schoolId} {
      allow read: if isAuth(); // Allow any authenticated user to read the school doc itself.

      // School-scoped user profiles
      match /users/{userId} {
        allow get: if isAuth();
        allow list, write: if isAdmin(schoolId);
      }
      
      // School-scoped config
      match /config/{docId} {
        allow read, write: if isAdmin(schoolId);
      }

      // Routes and their subcollections (stops)
      match /routes/{routeId} {
        allow read: if isAuth();
        allow list, create, update, delete: if isAdmin(schoolId);
        
        match /stops/{stopId} {
            allow read: if isAuth();
            allow write: if isAdmin(schoolId);
        }
      }

      // Buses, Students, Absences, Parent-Student Links
      match /buses/{busId} {
        allow read: if isAuth();
        allow write: if isAdmin(schoolId);
      }
      
      match /students/{studentId} {
        allow read: if isAuth();
        allow write: if isAdmin(schoolId);
      }
      
      match /absences/{absenceId} {
        allow list, get: if isAdmin(schoolId);
        // Parents should be able to create, but that rule would go here.
        // allow create: if isParentOfStudent(...)
      }
      
      match /parentStudents/{parentId} {
        allow read, write: if isAdmin(schoolId) || (isAuth() && uid() == parentId);
      }
      
      // User-specific subcollections (inbox)
      match /users/{userId}/inbox/{messageId} {
        allow read, write: if isAuth() && uid() == userId;
      }

      // Trips and their subcollections (passengers, telemetry)
      match /trips/{tripId} {
        allow get: if isAuth();
        allow list, create, update, delete: if isAdmin(schoolId);
        
        match /passengers/{paxId} {
            // Allow supervisors, assigned drivers, and admins to update
            allow read, write: if isAdmin(schoolId) 
                                 || get(/databases/$(database)/documents/schools/$(schoolId)/users/$(uid())).data.role == 'supervisor'
                                 || get(/databases/$(database)/documents/schools/$(schoolId)/trips/$(tripId)).data.driverId == uid();
        }
        
        match /telemetry/{pointId} {
            allow read, write: if isAdmin(schoolId) 
                                || get(/databases/$(database)/documents/schools/$(schoolId)/trips/$(tripId)).data.driverId == uid();
        }
      }
    }
  }
}
