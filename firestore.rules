rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    // --- Profile Helpers ---
    // myProfile() returns the user's own profile document from the 'users' collection.
    // It's used to get the user's role and schoolId.
    function myProfile() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    // mySchool() is a shorthand for getting the user's schoolId from their profile.
    function mySchool() {
      return myProfile().schoolId;
    }
    
    // --- Role Checks ---
    // These functions check the role of the currently authenticated user.
    // They are used throughout the rules to grant role-specific permissions.
    function isAdmin() {
      return myProfile().role == 'admin';
    }
    function isDriver() {
      return myProfile().role == 'driver';
    }
    function isSupervisor() {
      return myProfile().role == 'supervisor';
    }
    function isParent() {
      return myProfile().role == 'parent';
    }

    // --- USERS ---
    // Rules for the /users collection.
    match /users/{userId} {
      // Admins can manage all users within their school.
      allow read, write: if isAdmin() && resource.data.schoolId == mySchool();
      // Users can read and update their own profile.
      allow read, update: if request.auth.uid == userId;
      // Admins can list all users in their school.
      allow list: if isAdmin() && mySchool() != null;
    }

    // --- SCHOOL-SCOPED COLLECTIONS ---
    // This helper function checks if a document's schoolId matches the user's schoolId.
    function inMySchool() {
      return resource.data.schoolId == mySchool();
    }

    // Rules for /buses
    match /buses/{busId} {
      // Admins can fully manage buses in their school.
      allow read, write: if isAdmin() && inMySchool();
      // Drivers can read their assigned bus.
      allow get: if isDriver() && resource.data.driverId == request.auth.uid && inMySchool();
      // Admins can list all buses in their school.
      allow list: if isAdmin() && mySchool() != null;
    }

    // Rules for /routes
    match /routes/{routeId} {
      // Admins can fully manage routes in their school.
      allow read, write: if isAdmin() && inMySchool();
      // Authenticated users can read any route in their school (e.g., for display purposes).
      allow get: if isSignedIn() && inMySchool();
      // Admins can list all routes in their school.
      allow list: if isAdmin() && mySchool() != null;
    }
    
    // Rules for /students
    match /students/{studentId} {
        // Admins can fully manage students in their school.
        allow read, write: if isAdmin() && inMySchool();
        // Admins can list students in their school.
        allow list: if isAdmin() && mySchool() != null;
    }
    
    // Rules for /parentStudents (linking table)
    match /parentStudents/{linkId} {
        allow read, write: if isAdmin() && inMySchool();
    }

    // --- TRIPS ---
    // Rules for the /trips collection.
    match /trips/{tripId} {
      function trip() { return resource.data; }
      
      // Admins can manage all trips in their school.
      allow read, write: if isAdmin() && inMySchool();
      // Drivers can read trips they are assigned to.
      allow get: if isDriver() && trip().driverId == request.auth.uid && inMySchool();
      // Supervisors can read trips they are assigned to.
      allow get: if isSupervisor() && trip().supervisorId == request.auth.uid && inMySchool();
      
      // Admins can list all trips in their school.
      allow list: if isAdmin() && mySchool() != null;
      
      // Drivers can create new trips for their school.
      allow create: if isDriver() && request.resource.data.schoolId == mySchool();
      
      // Drivers can update specific fields on their own active trip.
      allow update: if isDriver() && trip().driverId == request.auth.uid && inMySchool()
                  && request.resource.data.diff(trip()).affectedKeys().hasOnly(['status', 'endedAt', 'lastLocation', 'allowDriverAsSupervisor', 'counts', 'updatedAt']);
                  
      // Supervisors can update counts on trips they are assigned to.
      allow update: if isSupervisor() 
                  && trip().supervisorId == request.auth.uid && inMySchool()
                  && request.resource.data.diff(trip()).changedKeys().hasOnly(['counts', 'updatedAt']);

      // --- PASSENGERS Subcollection ---
      // Rules for the passengers subcollection within a trip.
      match /passengers/{studentId} {
        function trip() {
          return get(/databases/$(database)/documents/trips/$(tripId)).data;
        }

        // Admins have full access to passengers in their school.
        allow read, write: if isAdmin() && resource.data.schoolId == mySchool();

        // Supervisors can read/write passengers on trips they are assigned to.
        allow read, write: if isSupervisor()
                          && resource.data.schoolId == mySchool()
                          && trip().supervisorId == request.auth.uid;
        
        // Drivers can create the initial passenger list (seeding).
        allow create: if isDriver() && request.resource.data.schoolId == mySchool();
        
        // Drivers can update passengers IF they are assigned AND allowed to supervise.
        allow update: if isDriver()
                      && resource.data.schoolId == mySchool()
                      && trip().driverId == request.auth.uid
                      && trip().allowDriverAsSupervisor == true;
                      
        // Allow reads for any authenticated user on a trip in their school.
        // This is important for CollectionGroup queries from the dashboard.
        allow get, list: if isSignedIn() && resource.data.schoolId == mySchool();
      }
      
       // --- EVENTS Subcollection ---
      match /events/{eventId} {
         allow read: if isAdmin() && resource.data.schoolId == mySchool();
         allow create: if (isDriver() || isSupervisor()) && request.resource.data.schoolId == mySchool();
      }
    }
  }
}
