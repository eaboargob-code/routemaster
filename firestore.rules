rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function getUserProfile(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }

    function getMyProfile() {
      return getUserProfile(request.auth.uid);
    }

    function isMySchool(schoolId) {
      return isAuthed() && getMyProfile().data.schoolId == schoolId;
    }
    
    function myRole() {
      return getMyProfile().data.role;
    }

    function isAdmin() {
      return isAuthed() && myRole() == 'admin';
    }

    function isDriver() {
      return isAuthed() && myRole() == 'driver';
    }

    // --- Collection Rules ---

    // Users: Admins can manage all users in their school.
    // Users can read their own profile.
    match /users/{userId} {
      allow read: if isAuthed() && request.auth.uid == userId;
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow create: if isAdmin() && isMySchool(request.resource.data.schoolId);
    }
    
    // Buses: Admins can manage all buses in their school.
    // Drivers can query for their assigned bus and read its details.
    match /buses/{busId} {
      // Admin: allow list/get/write if schoolId matches admin's school
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow create: if isAdmin() && isMySchool(request.resource.data.schoolId);

      // Driver: Allow a 'list' query filtered by their uid.
      // This is the key fix for the driver page query.
      allow list: if isDriver() && request.query.where.driverId == request.auth.uid;
      
      // Driver: Allow 'get' if the document's driverId matches.
      // This allows reading the specific document after the query returns it.
      allow get: if isDriver() && resource.data.driverId == request.auth.uid;
    }
    
    // Routes: Admins can manage all routes in their school.
    // Drivers can read any route document.
    match /routes/{routeId} {
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow create: if isAdmin() && isMySchool(request.resource.data.schoolId);
      allow get: if isDriver();
    }
    
    // Trips: Admins can manage all trips.
    // Drivers can create, read, and update their own trips.
    match /trips/{tripId} {
      allow read, write: if isAdmin() && isMySchool(resource.data.schoolId);
      allow create: if isAdmin() && isMySchool(request.resource.data.schoolId);

      allow create: if isDriver() && request.resource.data.driverId == request.auth.uid;
      allow read, update: if isDriver() && resource.data.driverId == request.auth.uid;
    }
  }
}
