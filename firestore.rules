rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // ---------- helpers ----------
    function authed()       { return request.auth != null; }
    function hasMe()        { return authed() && exists(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function me()           { return get(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function myRole()       { return hasMe() ? me().data.role : null; }
    function mySchool()     { return hasMe() ? me().data.schoolId : null; }
    function isAdmin()      { return myRole() == "admin"; }
    function isDriver()     { return myRole() == "driver"; }
    function isSupervisor() { return myRole() == "supervisor"; }
    function isParent()     { return myRole() == "parent"; }

    // ---------- users ----------
    match /users/{uid} {
      // Admin directory access (list + read) scoped by school
      allow list: if isAdmin() && mySchool() != null;
      allow read, update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      // Everyone can GET their own profile (bootstrap)
      allow get: if authed() && request.auth.uid == uid;

      // Drivers & Supervisors may GET specific user docs in their school (to show names)
      allow get: if (isDriver() || isSupervisor())
        && get(/databases/$(db)/documents/users/$(uid)).data.schoolId == mySchool();
    }

    // ---------- parentStudents ----------
    match /parentStudents/{parentId} {
      // Parent can read their own link doc via query
      allow list: if isParent() && mySchool() != null;
      allow get: if isParent() && request.auth.uid == parentId;

      // Admin manage links within school
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
    }

    // ---------- routes ----------
    match /routes/{id} {
      // Admin full control within school
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      
      // Drivers, Supervisors & Parents need read for their school's routes
      allow read: if (isDriver() || isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();
    }

    // ---------- buses ----------
    match /buses/{id} {
      // Admin full control within school
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Driver: only their assigned bus
      allow read: if isDriver() && resource.data.driverId == request.auth.uid;

      // Supervisor & Parent: read buses in their school
      allow read: if (isSupervisor() || isParent()) 
        && resource.data.schoolId == mySchool();
    }

    // ---------- trips ----------
    match /trips/{id} {
      // Admin
      allow list: if isAdmin() && mySchool() != null;
      allow read, update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      // Driver
      allow create: if isDriver()
        && request.resource.data.driverId == request.auth.uid
        && request.resource.data.schoolId == mySchool();

      allow read, update: if isDriver()
        && resource.data.driverId == request.auth.uid
        && resource.data.schoolId == mySchool();

      // Supervisor & Parent
      allow read: if (isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();

      // optional: limited update by supervisor (counts only)
      allow update: if isSupervisor()
        && resource.data.schoolId == mySchool()
        && resource.data.supervisorId == request.auth.uid
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);
    }

    // ---------- passengers subcollection ----------
    match /trips/{tripId}/passengers/{studentId} {
      function trip() { return get(/databases/$(db)/documents/trips/$(tripId)); }

      // Admin can see/manage passengers in their school
      allow read:  if isAdmin()      && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool());
      allow write: if isAdmin()      && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool());

      // Supervisor: for trips they supervise (same school)
      allow read:  if isSupervisor() && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
                                    && trip().data.supervisorId == request.auth.uid;
      allow write: if isSupervisor() && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
                                    && trip().data.supervisorId == request.auth.uid;

      // Driver: read-only by default; write only if driver-as-supervisor enabled
      allow read:  if isDriver()     && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
                                    && trip().data.driverId == request.auth.uid;

      // Seeding (driver creates pending rows at start)
      allow create: if isDriver()
        && (request.resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.driverId == request.auth.uid
        && request.resource.data.status == "pending"
        && (!("boardedAt" in request.resource.data) || request.resource.data.boardedAt == null)
        && (!("droppedAt" in request.resource.data) || request.resource.data.droppedAt == null);

      allow update, delete: if isDriver()
        && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
        && trip().data.driverId == request.auth.uid
        && trip().data.allowDriverAsSupervisor == true;
      
      // Parent: can read their own child's passenger record
      allow read: if isParent() 
        && request.auth.uid == get(/databases/$(db)/documents/parentStudents/{_..._}).data.parentId // This is tricky, client code structure is more important
        && studentId in get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)).data.studentIds;
    }

    // ---------- students ----------
    match /students/{id} {
      allow list: if isAdmin() && mySchool() != null;

      // Admin manage students in their school
      allow write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Staff read (admin/driver/supervisor) for same school
      allow read: if (isAdmin() || isDriver() || isSupervisor())
        && resource.data.schoolId == mySchool();

      // Parents: allow per-doc reads for their children (covers query results per doc)
      function isMyStudent() {
        let parentLink = get(/databases/$(db)/documents/parentStudents/$(request.auth.uid));
        return parentLink.data.studentIds.hasAny([id]);
      }
      
      allow read: if isParent()
        && resource.data.schoolId == mySchool()
        && exists(/databases/$(db)/documents/parentStudents/$(request.auth.uid))
        && isMyStudent();
    }
  }
}