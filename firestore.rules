rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {
    // --- helpers ---
    function authed()      { return request.auth != null; }
    function me()          { return get(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function hasMe()       { return authed() && me().exists(); }
    function myRole()      { return hasMe() ? me().data.role : null; }
    function mySchool()    { return hasMe() ? me().data.schoolId : null; }
    function isAdmin()     { return myRole() == "admin"; }
    function isDriver()    { return myRole() == "driver"; }

    // users: everyone can read their own; admins can manage all
    match /users/{uid} {
      allow read:  if authed() && uid == request.auth.uid;
      allow read, write: if isAdmin();
    }

    // routes: admins full control; drivers can read routes for their school
    match /routes/{id} {
      allow read, write: if isAdmin();
      allow read: if isDriver() && resource.data.schoolId == mySchool();
    }

    // buses: admins full control; drivers can read only their assigned bus in their school
    match /buses/{id} {
      allow read, write: if isAdmin();
      allow read: if isDriver()
                  && resource.data.driverId == request.auth.uid
                  && resource.data.schoolId == mySchool();
    }

    // trips: admins full control; drivers can create/read/update their own in their school
    match /trips/{id} {
      allow read, write: if isAdmin();

      allow create: if isDriver()
                    && request.resource.data.driverId == request.auth.uid
                    && request.resource.data.schoolId == mySchool();

      allow read, update: if isDriver()
                          && resource.data.driverId == request.auth.uid
                          && resource.data.schoolId == mySchool();
    }
  }
}