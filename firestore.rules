rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function getUserProfile(uid) {
      return get(/databases/$(db)/documents/users/$(uid));
    }

    function isUserProfile(uid) {
      return exists(/databases/$(db)/documents/users/$(uid));
    }

    function getMyProfile() {
      return getUserProfile(request.auth.uid);
    }
    
    function hasMyProfile() {
      return isAuth() && isUserProfile(request.auth.uid);
    }

    function myData() {
      return getMyProfile().data;
    }

    function myRole() {
      return hasMyProfile() ? myData().role : null;
    }

    function mySchoolId() {
      return hasMyProfile() ? myData().schoolId : null;
    }

    function isAdmin() {
      return myRole() == 'admin';
    }

    function isDriver() {
      return myRole() == 'driver';
    }

    // --- Rules ---

    // USERS: Admins can manage users in their school. Users can read their own profile.
    match /users/{userId} {
      allow read, write: if isAdmin() &&
        (resource == null || request.resource.data.schoolId == mySchoolId()) &&
        (resource != null || resource.data.schoolId == mySchoolId());
      
      allow get: if isAuth() && request.auth.uid == userId;
    }

    // ROUTES: Admins manage routes in their school. Drivers can read routes in their school.
    match /routes/{routeId} {
      allow read, write: if isAdmin() &&
        (resource == null || request.resource.data.schoolId == mySchoolId()) &&
        (resource != null || resource.data.schoolId == mySchoolId());

      allow get: if isDriver() && get(/databases/$(db)/documents/routes/$(routeId)).data.schoolId == mySchoolId();
    }

    // BUSES: Admins manage buses in their school. Drivers can read their assigned bus.
    match /buses/{busId} {
      allow read, write: if isAdmin() &&
        (resource == null || request.resource.data.schoolId == mySchoolId()) &&
        (resource != null || resource.data.schoolId == mySchoolId());
      
      // This rule allows a driver to run the query: where("driverId", "==", uid).limit(1)
      allow list: if isDriver() && request.query.get("driverId") == request.auth.uid;
      allow get: if isDriver() && resource.data.driverId == request.auth.uid;
    }

    // TRIPS: Admins manage trips. Drivers can create/read/update their own.
    match /trips/{tripId} {
      allow read, write: if isAdmin() &&
        (resource == null || request.resource.data.schoolId == mySchoolId()) &&
        (resource != null || resource.data.schoolId == mySchoolId());

      allow create: if isDriver() && 
        request.resource.data.driverId == request.auth.uid &&
        request.resource.data.schoolId == mySchoolId();
        
      allow read, update: if isDriver() && 
        resource.data.driverId == request.auth.uid &&
        resource.data.schoolId == mySchoolId();
    }
  }
}
