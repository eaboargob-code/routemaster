rules_version = '2';

service cloud.firestore {
  match /databases/{db}/documents {

    function authed() { return request.auth != null; }
    function hasMe() { return authed() && exists(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function me() { return get(/databases/$(db)/documents/users/$(request.auth.uid)); }
    function myRole() { return hasMe() ? me().data.role : null; }
    function mySchool() { return hasMe() ? me().data.schoolId : null; }
    function isAdmin() { return myRole() == "admin"; }
    function isDriver() { return myRole() == "driver"; }
    function isSupervisor() { return myRole() == "supervisor"; }
    function isParent() { return myRole() == "parent"; }

    function parentLink() { return get(/databases/$(db)/documents/parentStudents/$(request.auth.uid)); }
    function hasParentLink() { return exists(/databases/$(db)/documents/parentStudents/$(request.auth.uid)); }
    function isMyChild(studentId) {
      return hasParentLink() && studentId in parentLink().data.studentIds;
    }

    /* ---------- users ---------- */
    match /users/{uid} {
      allow list: if isAdmin() && mySchool() != null;
      allow get: if isAdmin() && resource.data.schoolId == mySchool();
      allow update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      allow get: if authed() && request.auth.uid == uid;
      allow get: if (isDriver() || isSupervisor() || isParent())
                 && get(/databases/$(db)/documents/users/$(uid)).data.schoolId == mySchool();

      allow update: if authed()
        && request.auth.uid == uid
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['fcmTokens']);
    }

    /* ---------- users/{uid}/notifications ---------- */
    match /users/{uid}/notifications/{noteId} {
      allow read, update, delete: if authed() && request.auth.uid == uid;
      allow create: if authed() && request.auth.uid == uid;
    }
    
    /* ---------- parentStudents ---------- */
    match /parentStudents/{parentId} {
      allow get: if isParent() && request.auth.uid == parentId;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow list: if isAdmin() && mySchool() != null;
    }

    /* ---------- routes ---------- */
    match /routes/{id} {
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow get: if (isDriver() || isSupervisor() || isParent())
                  && resource.data.schoolId == mySchool();
    }

    /* ---------- buses ---------- */
    match /buses/{id} {
      allow list: if isAdmin() && mySchool() != null;
      allow read, write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );
      allow get: if isDriver() && resource.data.driverId == request.auth.uid;
      allow get: if (isSupervisor() || isParent())
                  && resource.data.schoolId == mySchool();
    }

    /* ---------- trips ---------- */
    match /trips/{id} {
      // Admin
      allow list: if isAdmin() && mySchool() != null;
      allow get, update, delete: if isAdmin() && resource.data.schoolId == mySchool();
      allow create: if isAdmin() && request.resource.data.schoolId == mySchool();

      // Driver
      allow create: if isDriver()
        && request.resource.data.driverId == request.auth.uid
        && request.resource.data.schoolId == mySchool();

      allow get, update: if isDriver()
        && resource.data.driverId == request.auth.uid
        && resource.data.schoolId == mySchool();

      // Supervisor/Parent: can GET a trip in their school
      allow get: if (isSupervisor() || isParent())
        && resource.data.schoolId == mySchool();
        
      // Parent: can LIST trips for their school, which will be filtered on the client
      allow list: if isParent() && mySchool() != null;

      // Supervisor: limited counters update on their own trip
      allow update: if isSupervisor()
        && resource.data.schoolId == mySchool()
        && resource.data.supervisorId == request.auth.uid
        && request.resource.data.diff(resource.data).changedKeys().hasOnly(['counts','updatedAt']);
        
       match /passengers/{studentId} {
        function trip() { return get(/databases/$(db)/documents/trips/$(tripId)); }

        // Admin manage within school
        allow read, write: if isAdmin()
          && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool());

        // Supervisor manage for assigned trips
        allow read, write: if isSupervisor()
          && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
          && trip().data.supervisorId == request.auth.uid;

        // Driver read; write only if acting as supervisor
        allow read: if isDriver()
          && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
          && trip().data.driverId == request.auth.uid;

        // Seed pending rows at trip start
        allow create: if isDriver()
          && (request.resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
          && trip().data.driverId == request.auth.uid
          && request.resource.data.status == "pending";

        // Driver updates only when allowed as supervisor
        allow update, delete: if isDriver()
          && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
          && trip().data.driverId == request.auth.uid
          && trip().data.allowDriverAsSupervisor == true;

        // Parent: read only their child's passenger rows in their school
        allow read: if isParent()
          && (resource.data.schoolId == mySchool() || trip().data.schoolId == mySchool())
          && isMyChild(studentId);
       }
    }

    /* ---------- students ---------- */
    match /students/{id} {
      allow list: if isAdmin() && mySchool() != null;
      allow write: if isAdmin() && (
        (resource != null && resource.data.schoolId == mySchool()) ||
        (request.resource.data.schoolId == mySchool())
      );

      // Staff
      allow read: if (isAdmin() || isDriver() || isSupervisor())
        && resource.data.schoolId == mySchool();

      // Parent: only their child in same school
      allow read: if isParent()
        && resource.data.schoolId == mySchool()
        && isMyChild(id);
    }
  }
}
