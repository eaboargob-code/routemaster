DRIVER GEOLOCATION AND LOCATION TRACKING ANALYSIS
=================================================

This document analyzes the driver geolocation tracking and location write intervals in the RouteMASTER application.

## GEOLOCATION SERVICE (src/lib/geolocation.ts)
==============================================

### Core Service
- **Singleton Pattern**: GeolocationService class with getInstance() method
- **Browser Support**: Checks for 'geolocation' in navigator
- **Position Interface**: GeolocationPosition with latitude, longitude, accuracy, timestamp
- **Error Interface**: GeolocationError with code and message

### Key Methods
1. **getCurrentPosition()**: One-time position request
   - Returns Promise<GeolocationPosition>
   - Options: enableHighAccuracy: true, timeout: 10000ms, maximAge: 60000ms (1 minute)

2. **startWatching()**: Continuous position monitoring
   - Uses navigator.geolocation.watchPosition()
   - Options: enableHighAccuracy: true, timeout: 10000ms, maximAge: 30000ms (30 seconds)
   - Stores watchId for cleanup

3. **stopWatching()**: Stops position monitoring
   - Uses navigator.geolocation.clearWatch()

4. **Callback System**: Subscribe/unsubscribe to position updates and errors

## DRIVER LOCATION TRACKING IMPLEMENTATIONS
==========================================

### 1. Driver Route Page (src/app/driver/route/page.tsx)
**Real-time Tracking During Active Trip**
- **Geolocation Watch**: Uses navigator.geolocation.watchPosition()
  - Options: enableHighAccuracy: true, timeout: 10000ms, maximumAge: 10000ms
  - Updates driverGeo state with latitude/longitude
  - Error handling for PERMISSION_DENIED, POSITION_UNAVAILABLE, TIMEOUT

- **Location Write Interval**: 30-second cadence
  ```javascript
  const t = setInterval(write, 30000); // 30s cadence
  ```
  - Writes to Firestore: schools/{schoolId}/trips/{tripId}
  - Updates currentLocation field with lat, lng, timestamp
  - Only active when trip is started and driver location is available
  - Immediate write on interval start, then every 30 seconds

### 2. Driver Dashboard Page (src/app/driver/page.tsx)
**Periodic Location Updates for Active Trips**
- **Location Send Interval**: 60-second cadence
  ```javascript
  locationIntervalRef.current = setInterval(() => {
    handleSendLocation(true); // true for automatic, silent update
  }, 60000); // 60 seconds
  ```
  - Writes to Firestore: schools/{schoolId}/trips/{tripId}
  - Updates lastLocation field with lat, lng, timestamp
  - Only active when trip status is 'active'
  - Immediate location send on trip start

- **Manual Location Send**: Button-triggered location sharing
  - Uses navigator.geolocation.getCurrentPosition()
  - Options: enableHighAccuracy: true
  - Shows toast notifications for success/failure

## LOCATION DATA STRUCTURES
==========================

### Driver Location Interface (src/lib/routeOptimization.ts)
```typescript
export interface DriverLocation {
  latitude: number;
  longitude: number;
}
```

### Firestore Location Storage
1. **Trip Current Location** (route page):
   ```javascript
   currentLocation: {
     lat: number,
     lng: number,
     timestamp: serverTimestamp()
   }
   ```

2. **Trip Last Location** (dashboard page):
   ```javascript
   lastLocation: {
     lat: number,
     lng: number,
     at: serverTimestamp()
   }
   ```

## LOCATION USAGE IN COMPONENTS
==============================

### Route Optimization
- **optimizeRouteWithDriverLocation()**: Creates efficient routes from driver's current position
- **calculateTotalRouteDistanceWithDriver()**: Calculates total distance starting from driver location
- **getRouteStatisticsWithDriver()**: Includes driver location in route statistics

### Map Components
1. **GoogleRouteMap.tsx**: 
   - Displays driver marker on map
   - Uses currentDriverLocation for real-time updates
   - Supports route calculation from driver position

2. **RouteMap.tsx**: 
   - Shows driver location marker
   - Includes driver position in map bounds calculation
   - Validates driver coordinates before display

3. **OpenStreetRouteMap.tsx**: 
   - Similar driver location display functionality
   - Includes driver position in route coordinates

## LOCATION PERMISSIONS AND ERROR HANDLING
==========================================

### Permission States
- **PERMISSION_DENIED**: Location access denied by user
- **POSITION_UNAVAILABLE**: Location information unavailable
- **TIMEOUT**: Location request timed out

### Error Handling Strategies
1. **Toast Notifications**: User-friendly error messages
2. **Graceful Degradation**: App continues without location if unavailable
3. **Retry Logic**: Automatic retries with different timeout values
4. **Fallback Options**: Manual location entry when GPS fails

## LOCATION TRACKING INTERVALS SUMMARY
=====================================

### Active Tracking Intervals
1. **Route Page**: 30-second writes to currentLocation during active trip
2. **Dashboard Page**: 60-second writes to lastLocation for active trips
3. **Geolocation Watch**: Continuous position monitoring with 30-second maximumAge

### Performance Considerations
- **High Accuracy**: All implementations use enableHighAccuracy: true
- **Timeout Management**: 10-second timeouts for position requests
- **Cache Management**: 30-60 second maximumAge to balance accuracy and battery
- **Cleanup**: Proper interval and watch cleanup on component unmount

### Data Persistence
- **Firestore Integration**: Real-time location updates to trip documents
- **Server Timestamps**: Consistent timing using serverTimestamp()
- **School Scoping**: All location data scoped to specific school contexts
- **Trip Association**: Location tied to specific trip instances

## SECURITY AND PRIVACY
======================

### Location Data Protection
- **User Consent**: Browser-level geolocation permission required
- **School Scoping**: Location data isolated per school
- **Trip Context**: Location only tracked during active trips
- **Automatic Cleanup**: Location tracking stops when trips end

### Data Minimization
- **Purpose Limitation**: Location only used for route optimization and tracking
- **Retention**: Location data tied to trip lifecycle
- **Access Control**: Location data only accessible to authorized school users